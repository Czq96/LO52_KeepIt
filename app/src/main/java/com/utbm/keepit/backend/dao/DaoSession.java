package com.utbm.keepit.backend.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.utbm.keepit.backend.entity.Exercise;
import com.utbm.keepit.backend.entity.JoinTopicExercise;
import com.utbm.keepit.backend.entity.JoinSeanceExercise;
import com.utbm.keepit.backend.entity.User;
import com.utbm.keepit.backend.entity.Seance;
import com.utbm.keepit.backend.entity.Topic;

import com.utbm.keepit.backend.dao.ExerciseDao;
import com.utbm.keepit.backend.dao.JoinTopicExerciseDao;
import com.utbm.keepit.backend.dao.JoinSeanceExerciseDao;
import com.utbm.keepit.backend.dao.UserDao;
import com.utbm.keepit.backend.dao.SeanceDao;
import com.utbm.keepit.backend.dao.TopicDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig exerciseDaoConfig;
    private final DaoConfig joinTopicExerciseDaoConfig;
    private final DaoConfig joinSeanceExerciseDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig seanceDaoConfig;
    private final DaoConfig topicDaoConfig;

    private final ExerciseDao exerciseDao;
    private final JoinTopicExerciseDao joinTopicExerciseDao;
    private final JoinSeanceExerciseDao joinSeanceExerciseDao;
    private final UserDao userDao;
    private final SeanceDao seanceDao;
    private final TopicDao topicDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        exerciseDaoConfig = daoConfigMap.get(ExerciseDao.class).clone();
        exerciseDaoConfig.initIdentityScope(type);

        joinTopicExerciseDaoConfig = daoConfigMap.get(JoinTopicExerciseDao.class).clone();
        joinTopicExerciseDaoConfig.initIdentityScope(type);

        joinSeanceExerciseDaoConfig = daoConfigMap.get(JoinSeanceExerciseDao.class).clone();
        joinSeanceExerciseDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        seanceDaoConfig = daoConfigMap.get(SeanceDao.class).clone();
        seanceDaoConfig.initIdentityScope(type);

        topicDaoConfig = daoConfigMap.get(TopicDao.class).clone();
        topicDaoConfig.initIdentityScope(type);

        exerciseDao = new ExerciseDao(exerciseDaoConfig, this);
        joinTopicExerciseDao = new JoinTopicExerciseDao(joinTopicExerciseDaoConfig, this);
        joinSeanceExerciseDao = new JoinSeanceExerciseDao(joinSeanceExerciseDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        seanceDao = new SeanceDao(seanceDaoConfig, this);
        topicDao = new TopicDao(topicDaoConfig, this);

        registerDao(Exercise.class, exerciseDao);
        registerDao(JoinTopicExercise.class, joinTopicExerciseDao);
        registerDao(JoinSeanceExercise.class, joinSeanceExerciseDao);
        registerDao(User.class, userDao);
        registerDao(Seance.class, seanceDao);
        registerDao(Topic.class, topicDao);
    }
    
    public void clear() {
        exerciseDaoConfig.clearIdentityScope();
        joinTopicExerciseDaoConfig.clearIdentityScope();
        joinSeanceExerciseDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        seanceDaoConfig.clearIdentityScope();
        topicDaoConfig.clearIdentityScope();
    }

    public ExerciseDao getExerciseDao() {
        return exerciseDao;
    }

    public JoinTopicExerciseDao getJoinTopicExerciseDao() {
        return joinTopicExerciseDao;
    }

    public JoinSeanceExerciseDao getJoinSeanceExerciseDao() {
        return joinSeanceExerciseDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public SeanceDao getSeanceDao() {
        return seanceDao;
    }

    public TopicDao getTopicDao() {
        return topicDao;
    }

}
